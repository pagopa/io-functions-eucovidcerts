import { AzureFunction, Context } from "@azure/functions";

import { ContextMiddleware } from "@pagopa/io-functions-commons/dist/src/utils/middlewares/context_middleware";
import { initTelemetryClient } from "../utils/appinsights";
import { getConfigOrThrow } from "../utils/config";
import { createDGCClientSelector } from "../utils/dgcClientSelector";
import { setupAzureFunctionEndpoint } from "../utils/middlewares/setupFunction_helpers";
import { getGetCertificateHandler } from "./handler";

// server should be autogenerated
import { setupGetCertificate } from "./server";

const config = getConfigOrThrow();

// Setup Appinsight
initTelemetryClient(config);

const dgcClientSelector = createDGCClientSelector(config, process.env);
const handler = getGetCertificateHandler(dgcClientSelector);

const httpStart: AzureFunction = setupAzureFunctionEndpoint(app => {
  // Add express route
  setupGetCertificate<{ readonly context: Context }>(app, handler, {
    context: ContextMiddleware()
  });
});

export default httpStart;
